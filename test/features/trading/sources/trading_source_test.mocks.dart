// Mocks generated by Mockito 5.4.4 from annotations
// in beneficiary/test/features/trading/sources/trading_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:beneficiary/base/data/sources/base_remote_source.dart' as _i5;
import 'package:beneficiary/base/data/sources/token_type.dart' as _i10;
import 'package:beneficiary/base/domain/enums/serializer_type.dart' as _i9;
import 'package:beneficiary/base/networking/http_client.dart' as _i8;
import 'package:dart_kit/dart_kit.dart' as _i3;
import 'package:dio/dio.dart' as _i7;
import 'package:http_sdk/http_sdk.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpSdk_0 extends _i1.SmartFake implements _i2.HttpSdk {
  _FakeHttpSdk_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResult_1<T1> extends _i1.SmartFake implements _i3.Result<T1> {
  _FakeResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_2<T1> extends _i1.SmartFake implements _i4.Future<T1> {
  _FakeFuture_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BaseRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseRemoteSource extends _i1.Mock implements _i5.BaseRemoteSource {
  MockBaseRemoteSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HttpSdk get sdk => (super.noSuchMethod(
        Invocation.getter(#sdk),
        returnValue: _FakeHttpSdk_0(
          this,
          Invocation.getter(#sdk),
        ),
      ) as _i2.HttpSdk);

  @override
  String get loggerTag => (super.noSuchMethod(
        Invocation.getter(#loggerTag),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#loggerTag),
        ),
      ) as String);

  @override
  _i4.Future<_i3.Result<T>> sdkRequest<T>(_i4.Future<_i7.Response<T>>? call) =>
      (super.noSuchMethod(
        Invocation.method(
          #sdkRequest,
          [call],
        ),
        returnValue: _i4.Future<_i3.Result<T>>.value(_FakeResult_1<T>(
          this,
          Invocation.method(
            #sdkRequest,
            [call],
          ),
        )),
      ) as _i4.Future<_i3.Result<T>>);

  @override
  _i4.Future<T> request<T>({
    required _i8.HttpMethod? method,
    required String? endpoint,
    required String? callId,
    required T Function(dynamic)? serializer,
    _i9.SerializerType? serializerType = _i9.SerializerType.Single,
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
    bool? withAuth = true,
    _i7.ProgressCallback? onSendProgress,
    _i7.ProgressCallback? onReceiveProgress,
    _i7.CancelToken? cancelToken,
    _i10.TokenType? tokenType = _i10.TokenType.JWT,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [],
          {
            #method: method,
            #endpoint: endpoint,
            #callId: callId,
            #serializer: serializer,
            #serializerType: serializerType,
            #data: data,
            #queryParameters: queryParameters,
            #headers: headers,
            #withAuth: withAuth,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
            #cancelToken: cancelToken,
            #tokenType: tokenType,
          },
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #request,
                  [],
                  {
                    #method: method,
                    #endpoint: endpoint,
                    #callId: callId,
                    #serializer: serializer,
                    #serializerType: serializerType,
                    #data: data,
                    #queryParameters: queryParameters,
                    #headers: headers,
                    #withAuth: withAuth,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                    #cancelToken: cancelToken,
                    #tokenType: tokenType,
                  },
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_2<T>(
              this,
              Invocation.method(
                #request,
                [],
                {
                  #method: method,
                  #endpoint: endpoint,
                  #callId: callId,
                  #serializer: serializer,
                  #serializerType: serializerType,
                  #data: data,
                  #queryParameters: queryParameters,
                  #headers: headers,
                  #withAuth: withAuth,
                  #onSendProgress: onSendProgress,
                  #onReceiveProgress: onReceiveProgress,
                  #cancelToken: cancelToken,
                  #tokenType: tokenType,
                },
              ),
            ),
      ) as _i4.Future<T>);

  @override
  void v(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #v,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void d(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #d,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void i(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #i,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void w(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #w,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void e(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #e,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void wtf(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #wtf,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> fatal({
    dynamic error,
    StackTrace? stackTrace,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fatal,
          [],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
